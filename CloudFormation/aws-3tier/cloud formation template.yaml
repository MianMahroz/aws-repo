AWSTemplateFormatVersion: '2010-09-09'
Description: Traditional 3-Tier Architecture in AWS with Bastion Host

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  AmiId:
    Type: String
    Default: ami-0f88e80871fd81e91
  KeyPair:
    Type: String
    Default: 3tier-app-key

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TraditionalVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TraditionalIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NatGatewayEIP1

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NatGatewayEIP2

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NatGateway2

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSG

  PresentationInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and outbound internet access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PresentationInstanceSG

  AppTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB and SSH from Bastion
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AppTierSG

  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from app tier
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppTierSG
      Tags:
        - Key: Name
          Value: DBSG

  PresentationALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: PresentationALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSG
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: PresentationALB

  ApplicationALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ApplicationALB
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref ALBSG
      Scheme: internal
      Type: application
      Tags:
        - Key: Name
          Value: ApplicationALB

  PresentationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Name: PresentationTG

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Name: ApplicationTG

  PresentationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PresentationTargetGroup
      LoadBalancerArn: !Ref PresentationALB
      Port: 80
      Protocol: HTTP

  ApplicationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup
      LoadBalancerArn: !Ref ApplicationALB
      Port: 80
      Protocol: HTTP

  PresentationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: PresentationLT
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: !Ref AmiId
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref PresentationInstanceSG
        UserData: !Base64 |
          #!/bin/bash
          exec > /tmp/userdata.log 2>&1
          echo "nameserver 8.8.8.8" > /etc/resolv.conf
          yum update -y
          yum install -y httpd
          if [ $? -eq 0 ]; then
            echo "httpd installation successful" >> /tmp/userdata.log
            systemctl start httpd
            systemctl enable httpd
            echo "httpd started and enabled" >> /tmp/userdata.log
            echo "Presentation layer running" > /var/www/html/index.html
          else
            echo "httpd installation FAILED" >> /tmp/userdata.log
            ping -c 3 google.com >> /tmp/userdata.log
            curl -I http://google.com >> /tmp/userdata.log
            exit 1
          fi

  ApplicationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ApplicationLT
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: !Ref AmiId
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref AppTierSG
        UserData: !Base64 |
          #!/bin/bash
          exec > /tmp/userdata.log 2>&1
          yum update -y
          yum install -y httpd
          if [ $? -eq 0 ]; then
            echo "httpd installation successful" >> /tmp/userdata.log
            systemctl start httpd
            systemctl enable httpd
            echo "httpd started and enabled" >> /tmp/userdata.log
            echo "BE SERVER layer running" > /var/www/html/index.html
          else
            echo "httpd installation FAILED" >> /tmp/userdata.log
            exit 1
          fi

  PresentationASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref PresentationLaunchTemplate
        Version: !GetAtt PresentationLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref PresentationTargetGroup
      Tags:
        - Key: Name
          Value: PresentationInstance
          PropagateAtLaunch: true

  ApplicationASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ApplicationLaunchTemplate
        Version: !GetAtt ApplicationLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ApplicationTargetGroup
      Tags:
        - Key: Name
          Value: ApplicationInstance
          PropagateAtLaunch: true

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for DB
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: DBSubnetGroup

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: mydb
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: MyDBPass123!
      VPCSecurityGroups:
        - !Ref DBSG
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: DatabaseInstance

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1 (AZ1)

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NatGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2 (AZ2)

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NatGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from your IP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BastionSG

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPair
      ImageId: !Ref AmiId
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: BastionHost

  BastionEIP:
    Type: AWS::EC2::EIP
    DependsOn: BastionHost
    Properties:
      Domain: vpc
      InstanceId: !Ref BastionHost
      Tags:
        - Key: Name
          Value: BastionEIP

Outputs:
  VPCId:
    Value: !Ref VPC
    Description: VPC ID
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Description: Public Subnet 1 ID
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Description: Public Subnet 2 ID
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Description: Private Subnet 1 ID
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Description: Private Subnet 2 ID
  BastionHostPublicIP:
    Value: !GetAtt BastionEIP.PublicIp
    Description: Public IP of Bastion Host
  PresentationALBDNS:
    Value: !GetAtt PresentationALB.DNSName
    Description: DNS Name of Presentation ALB
  ApplicationALBDNS:
    Value: !GetAtt ApplicationALB.DNSName
    Description: DNS Name of Application ALB